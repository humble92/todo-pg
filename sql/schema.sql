-- =================================================================
-- DATABASE & SCHEMA CREATION
-- =================================================================
-- Creates the database. Does not cause an error if it already exists.
-- CREATE DATABASE slack_todo_db; -- This command may need to be executed separately in a client like psql.
-- Creates a separate schema for this app to logically group the tables.
CREATE SCHEMA IF NOT EXISTS todo_app;
-- Sets the default schema for the current session to todo_app.
SET search_path TO todo_app;
-- =================================================================
-- EXTENSIONS & TYPES
-- =================================================================
-- Enables the pgcrypto extension for password hashing.
CREATE EXTENSION IF NOT EXISTS pgcrypto;
-- Enables the pg_trgm extension for trigram search.
CREATE EXTENSION IF NOT EXISTS pg_trgm;
-- Defines an ENUM type for the status of the scheduled_reminders table.
CREATE TYPE reminder_status AS ENUM ('pending', 'processing', 'sent', 'failed');
-- =================================================================
-- TABLE DEFINITIONS
-- =================================================================
-- 1. Users table
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    email TEXT UNIQUE,
    password_hash TEXT,
    -- Stores hash generated by pgcrypto's crypt() function
    social_provider TEXT,
    social_provider_id TEXT,
    slack_channel TEXT,
    created_at TIMESTAMPTZ DEFAULT now(),
    UNIQUE (social_provider, social_provider_id),
    CONSTRAINT chk_auth_method CHECK (
        (
            email IS NOT NULL
            AND password_hash IS NOT NULL
        )
        OR (
            social_provider IS NOT NULL
            AND social_provider_id IS NOT NULL
        )
    )
);
-- 2. Todos table (with pg_trgm applied)
CREATE TABLE todos (
    id SERIAL PRIMARY KEY,
    user_id INT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    due_date TIMESTAMPTZ NOT NULL,
    completed BOOLEAN DEFAULT FALSE,
    completed_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT now(),
    -- The existing description_fts column has been removed.
    description TEXT NOT NULL,
    -- e.g. payload: {"tags": ["design", "planning"], "priority": "high", "attachments": ["report.pdf"], "notes": "Request final review from Manager Yang"}
    payload JSONB
);
-- Creates FTS index that converts text inside payload JSONB to tsvector
-- (Uses 'simple' configuration here which handles all languages well)
CREATE INDEX idx_todos_payload_fts ON todos USING GIN (to_tsvector('simple', payload::text));
-- Creates a GIN index using pg_trgm on the description column.
-- This index makes ILIKE or SIMILARITY searches very fast.
CREATE INDEX idx_todos_description_trgm ON todos USING GIN (description gin_trgm_ops);
-- Index for quickly finding todos sorted by due_date.
CREATE INDEX idx_todos_due_date ON todos (due_date);
CREATE INDEX idx_todos_user_due_date ON todos (user_id, due_date);
-- 3. Scheduled_reminders table (Cache/Queue role)
-- Temporary table for managing pending notifications. Experiments with queue role as Redis replacement.
CREATE TABLE scheduled_reminders (
    id SERIAL PRIMARY KEY,
    todo_id INT NOT NULL REFERENCES todos(id) ON DELETE CASCADE,
    user_id INT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    scheduled_for TIMESTAMPTZ NOT NULL,
    status reminder_status DEFAULT 'pending',
    retry_count INT DEFAULT 0,
    -- Time to lock so other workers cannot process the same task. (e.g., now() + 5 minutes)
    visibility_timeout TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT now(),
    started_at TIMESTAMPTZ,
    posted_at TIMESTAMPTZ,
    error TEXT NULL
);
-- Unique index to prevent duplicate entries for the same todo_id.
CREATE UNIQUE INDEX IF NOT EXISTS uq_todo_id ON scheduled_reminders (todo_id);
-- Composite index for workers to efficiently find tasks to process.
CREATE INDEX idx_scheduled_reminders_for_worker ON scheduled_reminders (status, scheduled_for);
-- =================================================================
-- FUNCTIONS & TRIGGERS
-- =================================================================
-- Notify workers when status is pending.
CREATE OR REPLACE FUNCTION notify_pending() RETURNS TRIGGER AS $$
BEGIN
  IF (NEW.status = 'pending') THEN
    PERFORM pg_notify('reminder_pending', NEW.id::text);
  END IF;
  RETURN NEW;
END; $$ LANGUAGE plpgsql;
-- Trigger to notify workers when status is pending.
CREATE TRIGGER trg_notify_pending
AFTER INSERT OR UPDATE OF status ON scheduled_reminders
FOR EACH ROW EXECUTE FUNCTION notify_pending();